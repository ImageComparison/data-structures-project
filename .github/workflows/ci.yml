# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on: 
  workflow_dispatch:
  push:
    tags:
      - '*'

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug]
        targetplatform: [x64] # x86, 

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    env:
      SigningCertificate: App\ImageComparisonMSIX\certificate.pfx
      Solution_Path: App\ImageComparisonMSIX\ImageComparisonMSIX.wapproj
      UWP_Project_Path: App\UWP\UWP.csproj
      UWP_Project_Directory: App\UWP  
      
    steps:      
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
        
    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
        
    # Restore the application
#     - name: Restore the UWP application to populate the obj folder
#       run: msbuild $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
#       env:
#         Configuration: Debug
#         RuntimeIdentifier: win-${{ matrix.targetplatform }}
        
    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Build the Windows Application Packaging Project (wapproj)
    
#       run: msbuild $env:Solution_Path /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode  /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}

      run: msbuild $env:Solution_Path /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxPackageOutput=${{ env.UWP_Project_Directory }}\AppPackages\MsixDesktopApp.msix /p:AppxBundle=$env:AppxBundle /p:AppxPackageSigningEnabled=false /p:OutputPath=NonPackagedApp
      env:
        AppxBundle: Never
        BuildMode: SideLoadOnly
        Configuration: Debug
        TargetPlatform: ${{ matrix.targetplatform }}
        
    - name: Sign MSIX Package
#       uses: DanaBear/code-sign-action@v4
      run: '"C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\signtool" sign /fd SHA256 /f ${{ env.SigningCertificate }} /p secret ${{ env.UWP_Project_Directory }}/AppPackages/MsixDesktopApp.msix'

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.UWP_Project_Directory }}\AppPackages\
