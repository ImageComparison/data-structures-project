# IGNORE THIS DEF LOAD(SELF) I STOLE IT FROM PIL SOURCE CODE
# TRYING TO UNDERSTAND HOW WE COULD DO IT FROM SCRATCH ALTHOUGH
# IT LOOKS LIKE THEY DO IT IN C NOT PYTHON AND USE CFFI
def load(self):
    if self.im and self.palette and self.palette.dirty:
        mode, arr = self.palette.getdata()
        if mode == "RGBA":
            mode = "RGB"
            self.info["transparency"] = arr[3::4]
            arr = bytes(
                value for (index, value) in enumerate(arr) if index % 4 != 3
            )
        palette_length = self.im.putpalette(mode, arr)
        self.palette.dirty = 0
        self.palette.rawmode = None
        if "transparency" in self.info and mode in ("LA", "PA"):
            if isinstance(self.info["transparency"], int):
                self.im.putpalettealpha(self.info["transparency"], 0)
            else:
                self.im.putpalettealphas(self.info["transparency"])
            self.palette.mode = "RGBA"
        else:
            self.palette.mode = "RGB"
            self.palette.palette = self.im.getpalette()[: palette_length * 3]

    if self.im:
        if cffi and USE_CFFI_ACCESS:
            if self.pyaccess:
                return self.pyaccess
            from . import PyAccess

            self.pyaccess = PyAccess.new(self, self.readonly)
            if self.pyaccess:
                return self.pyaccess
        return self.im.pixel_access(self.readonly)